/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Graphics;

import DataContainers.Booking;
import DataContainers.Customer;
import DataContainers.Holiday;
import DataContainers.Magician;
import DataContainers.WaitlistEntry;
import Database.DatabaseHandler;
import com.sun.glass.events.MouseEvent;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JFormattedTextField;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JSpinner;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatter;

/**
 *
 * @author evan1026
 */
public class GUI extends javax.swing.JFrame {
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        
        JSpinner.NumberEditor editor1 = new JSpinner.NumberEditor(YearSpinner);
        editor1.getFormat().setGroupingUsed(false);
        YearSpinner.setEditor(editor1);
        YearSpinner.setValue(2015);
        JFormattedTextField field = (JFormattedTextField) editor1.getTextField();
        DefaultFormatter formatter = (DefaultFormatter) field.getFormatter();
        formatter.setCommitsOnValidEdit(true);
        
        JSpinner.NumberEditor editor2 = new JSpinner.NumberEditor(BookYearSpinner);
        editor2.getFormat().setGroupingUsed(false);
        BookYearSpinner.setEditor(editor2);
        BookYearSpinner.setValue(2015);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ActionSelectorPane = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        BookingPane = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        BookCustomerNameTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        BookCustomerPhoneNumberTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        BookHolidaySelectionComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        BookEventAddressTextField = new javax.swing.JTextField();
        BookSubmitButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        BookYearSpinner = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        StatusPane = new javax.swing.JTabbedPane();
        HolidaysScrollPane = new javax.swing.JScrollPane();
        HolidaysPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        HolidayComboBox = new javax.swing.JComboBox<>();
        YearSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        HolidaysTable = new javax.swing.JTable();
        MagiciansScrollPane = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        MagiciansComboBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        MagicianTable = new javax.swing.JTable();
        WaitlistScrollPane = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        WaitlistTable = new javax.swing.JTable();
        MagiciansPane = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        AddMagicianNameTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        AddMagicianButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        DropMagicianComboBox = new javax.swing.JComboBox<>();
        DropMagicianButton = new javax.swing.JButton();
        AddHolidayPane = new javax.swing.JPanel();
        MonthComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        DaysComboBox = new javax.swing.JComboBox<>();
        AddHolidayButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        HolidayNameTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ActionSelectorPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ActionSelectorPaneStateChanged(evt);
            }
        });

        BookingPane.setPreferredSize(new java.awt.Dimension(498, 120));

        jLabel4.setText("Customer Name (first and last):");

        jLabel5.setText("Customer Phone Number (XXX-XXX-XXXX):");

        jLabel6.setText("Holiday:");

        BookHolidaySelectionComboBox.setModel(HolidayComboBox.getModel());
        BookHolidaySelectionComboBox.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Holiday holiday = (Holiday)value;
                if (holiday == null) value = "<no holidays>";
                else                 value = holiday.getName();
                return super.getListCellRendererComponent(list, value,
                    index, isSelected, cellHasFocus);
            }
        });

        jLabel7.setText("Event Address:");

        BookSubmitButton.setText("Submit");
        BookSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookSubmitButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Year:");

        BookYearSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        javax.swing.GroupLayout BookingPaneLayout = new javax.swing.GroupLayout(BookingPane);
        BookingPane.setLayout(BookingPaneLayout);
        BookingPaneLayout.setHorizontalGroup(
            BookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookingPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BookingPaneLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BookCustomerPhoneNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE))
                    .addGroup(BookingPaneLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BookYearSpinner))
                    .addGroup(BookingPaneLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BookHolidaySelectionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(BookingPaneLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BookEventAddressTextField))
                    .addGroup(BookingPaneLayout.createSequentialGroup()
                        .addComponent(BookSubmitButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(BookingPaneLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BookCustomerNameTextField)))
                .addContainerGap())
        );
        BookingPaneLayout.setVerticalGroup(
            BookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookingPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(BookCustomerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(BookCustomerPhoneNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(BookEventAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(BookHolidaySelectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(BookYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BookSubmitButton)
                .addContainerGap(91, Short.MAX_VALUE))
        );

        jScrollPane5.setViewportView(BookingPane);

        ActionSelectorPane.addTab("Book", jScrollPane5);

        StatusPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                StatusPaneStateChanged(evt);
            }
        });

        jLabel1.setText("Holiday");

        HolidayComboBox.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Holiday holiday = (Holiday)value;
                if (holiday == null) value = "<no holidays>";
                else                 value = holiday.getName();
                return super.getListCellRendererComponent(list, value,
                    index, isSelected, cellHasFocus);
            }
        });
        HolidayComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                HolidayComboBoxItemStateChanged(evt);
            }
        });

        YearSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        YearSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                YearSpinnerStateChanged(evt);
            }
        });

        jLabel2.setText("Year");

        HolidaysTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer", "Phone Number", "Holiday", "Year", "Magician", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        HolidaysTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HolidaysTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(HolidaysTable);

        javax.swing.GroupLayout HolidaysPanelLayout = new javax.swing.GroupLayout(HolidaysPanel);
        HolidaysPanel.setLayout(HolidaysPanelLayout);
        HolidaysPanelLayout.setHorizontalGroup(
            HolidaysPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HolidaysPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HolidayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(YearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
        );
        HolidaysPanelLayout.setVerticalGroup(
            HolidaysPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HolidaysPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HolidaysPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(YearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(HolidayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
        );

        HolidaysScrollPane.setViewportView(HolidaysPanel);

        StatusPane.addTab("Holidays", HolidaysScrollPane);

        jLabel3.setText("Magician");

        MagiciansComboBox.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Magician magician = (Magician)value;
                if (magician == null) value = "<no magicians>";
                else                  value = magician.getName();
                return super.getListCellRendererComponent(list, value,
                    index, isSelected, cellHasFocus);
            }
        });
        MagiciansComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MagiciansComboBoxItemStateChanged(evt);
            }
        });

        MagicianTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer", "Phone Number", "Holiday", "Year", "Magician", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MagicianTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MagicianTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(MagicianTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MagiciansComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(MagiciansComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
        );

        MagiciansScrollPane.setViewportView(jPanel3);

        StatusPane.addTab("Magicians", MagiciansScrollPane);

        WaitlistTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer", "Phone Number", "Holiday", "Year", "Timestamp", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        WaitlistTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                WaitlistTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(WaitlistTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
        );

        WaitlistScrollPane.setViewportView(jPanel4);

        StatusPane.addTab("Waitlist", WaitlistScrollPane);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StatusPane)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StatusPane)
                .addContainerGap())
        );

        ActionSelectorPane.addTab("Status", jPanel2);

        jLabel9.setText("Name:");

        AddMagicianButton.setText("Add Magician");
        AddMagicianButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddMagicianButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(AddMagicianNameTextField))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(AddMagicianButton)
                        .addGap(0, 585, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(AddMagicianNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(AddMagicianButton)
                .addContainerGap(162, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add", jPanel6);

        DropMagicianComboBox.setModel(MagiciansComboBox.getModel());
        DropMagicianComboBox.setRenderer(MagiciansComboBox.getRenderer());

        DropMagicianButton.setText("Drop");
        DropMagicianButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DropMagicianButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DropMagicianButton)
                    .addComponent(DropMagicianComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(502, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DropMagicianComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DropMagicianButton)
                .addContainerGap(162, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Drop", jPanel7);

        javax.swing.GroupLayout MagiciansPaneLayout = new javax.swing.GroupLayout(MagiciansPane);
        MagiciansPane.setLayout(MagiciansPaneLayout);
        MagiciansPaneLayout.setHorizontalGroup(
            MagiciansPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        MagiciansPaneLayout.setVerticalGroup(
            MagiciansPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("tab2");

        ActionSelectorPane.addTab("Magicians", MagiciansPane);

        MonthComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        MonthComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MonthComboBoxItemStateChanged(evt);
            }
        });

        jLabel10.setText("Month");

        jLabel11.setText("Day");

        AddHolidayButton.setText("Add");
        AddHolidayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddHolidayButtonActionPerformed(evt);
            }
        });

        jLabel12.setText("Name");

        javax.swing.GroupLayout AddHolidayPaneLayout = new javax.swing.GroupLayout(AddHolidayPane);
        AddHolidayPane.setLayout(AddHolidayPaneLayout);
        AddHolidayPaneLayout.setHorizontalGroup(
            AddHolidayPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddHolidayPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AddHolidayPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddHolidayPaneLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(HolidayNameTextField))
                    .addGroup(AddHolidayPaneLayout.createSequentialGroup()
                        .addGroup(AddHolidayPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AddHolidayPaneLayout.createSequentialGroup()
                                .addGroup(AddHolidayPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11))
                                .addGap(18, 18, 18)
                                .addGroup(AddHolidayPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DaysComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(AddHolidayButton))
                        .addGap(0, 560, Short.MAX_VALUE)))
                .addContainerGap())
        );
        AddHolidayPaneLayout.setVerticalGroup(
            AddHolidayPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddHolidayPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AddHolidayPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(MonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddHolidayPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DaysComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddHolidayPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HolidayNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addComponent(AddHolidayButton)
                .addContainerGap(138, Short.MAX_VALUE))
        );

        ActionSelectorPane.addTab("Add Holiday", AddHolidayPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ActionSelectorPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ActionSelectorPane)
                .addContainerGap())
        );

        ActionSelectorPane.getAccessibleContext().setAccessibleName("Status");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StatusPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_StatusPaneStateChanged
        updateStatusPane();
    }//GEN-LAST:event_StatusPaneStateChanged

    private void ActionSelectorPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ActionSelectorPaneStateChanged
        if (ActionSelectorPane.getSelectedComponent() == StatusPane) {
            updateStatusPane();
        } else if (ActionSelectorPane.getSelectedComponent() == BookingPane){
            updateBookHolidayComboBox();
        } else if (ActionSelectorPane.getSelectedComponent() == MagiciansPane) {
            updateMagicianComboBox();
        } else if (ActionSelectorPane.getSelectedComponent() == AddHolidayPane) {
            updateDaysComboBox();
        }
    }//GEN-LAST:event_ActionSelectorPaneStateChanged

    private void MagiciansComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MagiciansComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            updateMagiciansTableWrapper(true);
        }
    }//GEN-LAST:event_MagiciansComboBoxItemStateChanged

    private void HolidayComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_HolidayComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            updateHolidayTableWrapper(true);
        }
    }//GEN-LAST:event_HolidayComboBoxItemStateChanged

    private void YearSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_YearSpinnerStateChanged
        updateHolidayTableWrapper(true);
    }//GEN-LAST:event_YearSpinnerStateChanged

    private void BookSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookSubmitButtonActionPerformed
        if (evt.getActionCommand().equals("Submit")) {
            String name = BookCustomerNameTextField.getText();
            String phone = BookCustomerPhoneNumberTextField.getText();
            String address = BookEventAddressTextField.getText();
            Holiday h = (Holiday) BookHolidaySelectionComboBox.getSelectedItem();
            int year = (int) BookYearSpinner.getValue();
            
            if (name.equals(""))
                JOptionPane.showMessageDialog(null, "Name cannot be blank.", "Error", JOptionPane.ERROR_MESSAGE);
            else if (phone.equals(""))
                JOptionPane.showMessageDialog(null, "Phone number cannot be blank.", "Error", JOptionPane.ERROR_MESSAGE);
            else if (address.equals(""))
                JOptionPane.showMessageDialog(null, "Address cannot be blank.", "Error", JOptionPane.ERROR_MESSAGE);
            else if (h == null)
                JOptionPane.showMessageDialog(null, "A holiday must be selected.", "Error", JOptionPane.ERROR_MESSAGE);
            else if (year < 0)
                JOptionPane.showMessageDialog(null, "Year cannot be negative.", "Error", JOptionPane.ERROR_MESSAGE);
            else {
                int id = -2;
                try {
                    id = DatabaseHandler.getInstance().getCustomerIDFromInfo(name, phone);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Error getting customer ID from database.", "Error", JOptionPane.ERROR_MESSAGE);
                }

                if (id == -1) {
                    try {
                        id = DatabaseHandler.getInstance().addCustomer(name, phone);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Error adding customer to database.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }

                if (id > 0) {
                    if (!checkPhone(phone)) {
                        JOptionPane.showMessageDialog(null, "Invalid phone number.", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        try {
                            int result = DatabaseHandler.getInstance().tryBookAndWaitlist(id, h.getId(), year, address);
                            if (result > 0) {
                                Magician magician = DatabaseHandler.getInstance().getMagicianFromID(result);
                                JOptionPane.showMessageDialog(null, "Successfully booked " + magician.getName() + " for " + h.getName() + ", " + year + ".", "Booked", JOptionPane.INFORMATION_MESSAGE);
                            } else {
                                JOptionPane.showMessageDialog(null, "Waitlisted for " + h.getName() + ", " + year + ".", "Waitlisted", JOptionPane.INFORMATION_MESSAGE);
                            }
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, "Error booking magician.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_BookSubmitButtonActionPerformed

    private void HolidaysTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HolidaysTableMouseClicked
        if (SwingUtilities.isRightMouseButton(evt)) {
            if (HolidaysTable.getSelectedRows().length > 0) {
                JPopupMenu popup = new JPopupMenu();
                JMenuItem delete = new JMenuItem("Delete selected rows");
                popup.add(delete);
                delete.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        for (int holidayIndex : HolidaysTable.getSelectedRows()) {
                            String customerName  = (String) HolidaysTable.getValueAt(holidayIndex, 0);
                            String customerPhone = (String) HolidaysTable.getValueAt(holidayIndex, 1);
                            String holidayName   = (String) HolidaysTable.getValueAt(holidayIndex, 2);
                            int year             = (int) HolidaysTable.getValueAt(holidayIndex, 3);
                            String magicianName  = (String) HolidaysTable.getValueAt(holidayIndex, 4);
                            
                            int customerID;
                            int magicianID;
                            int holidayID;
                            try {
                                customerID = DatabaseHandler.getInstance().getCustomerIDFromInfo(customerName, customerPhone);
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "Error getting customer information from database.", "Error", JOptionPane.ERROR_MESSAGE);
                                continue;
                            }
                            try {
                                magicianID = DatabaseHandler.getInstance().getMagicianIDFromName(magicianName);
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "Error getting magician information from database.", "Error", JOptionPane.ERROR_MESSAGE);
                                continue;
                            }
                            try {
                                holidayID  = DatabaseHandler.getInstance().getHolidayIDFromName(holidayName);
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "Error getting holiday information from database.", "Error", JOptionPane.ERROR_MESSAGE);
                                continue;
                            }
                            
                            try {
                                DatabaseHandler.getInstance().deleteBooking(customerID, magicianID, holidayID, year);
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "Error deleting row.", "Error", JOptionPane.ERROR_MESSAGE);
                                System.out.println(ex.getMessage());
                            }
                            recheckWaitlist(holidayID, year);
                        }
                        updateHolidayTableWrapper(false);
                        updateWaitlistTable();
                    }
                    
                });
                
                popup.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_HolidaysTableMouseClicked

    private void MagicianTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MagicianTableMouseClicked
        if (SwingUtilities.isRightMouseButton(evt)) {
            if (MagicianTable.getSelectedRows().length > 0) {
                JPopupMenu popup = new JPopupMenu();
                JMenuItem delete = new JMenuItem("Delete selected rows");
                popup.add(delete);
                delete.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        for (int magicianIndex : MagicianTable.getSelectedRows()) {
                            String customerName  = (String) MagicianTable.getValueAt(magicianIndex, 0);
                            String customerPhone = (String) MagicianTable.getValueAt(magicianIndex, 1);
                            String holidayName   = (String) MagicianTable.getValueAt(magicianIndex, 2);
                            int year             = (int) MagicianTable.getValueAt(magicianIndex, 3);
                            String magicianName  = (String) MagicianTable.getValueAt(magicianIndex, 4);
                            
                            int customerID;
                            int magicianID;
                            int holidayID;
                            try {
                                customerID = DatabaseHandler.getInstance().getCustomerIDFromInfo(customerName, customerPhone);
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "Error getting customer information from database.", "Error", JOptionPane.ERROR_MESSAGE);
                                continue;
                            }
                            try {
                                magicianID = DatabaseHandler.getInstance().getMagicianIDFromName(magicianName);
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "Error getting magician information from database.", "Error", JOptionPane.ERROR_MESSAGE);
                                continue;
                            }
                            try {
                                holidayID  = DatabaseHandler.getInstance().getHolidayIDFromName(holidayName);
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "Error getting holiday information from database.", "Error", JOptionPane.ERROR_MESSAGE);
                                continue;
                            }
                            
                            try {
                                DatabaseHandler.getInstance().deleteBooking(customerID, magicianID, holidayID, year);
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "Error deleting row.", "Error", JOptionPane.ERROR_MESSAGE);
                                continue;
                            }
                            
                            recheckWaitlist(holidayID, year);
                        }
                        updateMagiciansTableWrapper(false);
                        updateWaitlistTable();
                    }
                    
                });
                
                popup.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_MagicianTableMouseClicked

    private void WaitlistTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WaitlistTableMouseClicked
        if (SwingUtilities.isRightMouseButton(evt)) {
            if (WaitlistTable.getSelectedRows().length > 0) {
                JPopupMenu popup = new JPopupMenu();
                JMenuItem delete = new JMenuItem("Delete selected rows");
                popup.add(delete);
                delete.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        for (int magicianIndex : WaitlistTable.getSelectedRows()) {
                            String customerName  = (String) WaitlistTable.getValueAt(magicianIndex, 0);
                            String customerPhone = (String) WaitlistTable.getValueAt(magicianIndex, 1);
                            String holidayName   = (String) WaitlistTable.getValueAt(magicianIndex, 2);
                            int year             = (int)    WaitlistTable.getValueAt(magicianIndex, 3);
                            long timestamp       = (long)   WaitlistTable.getValueAt(magicianIndex, 4);
                            
                            int customerID;
                            int holidayID;
                            try {
                                customerID = DatabaseHandler.getInstance().getCustomerIDFromInfo(customerName, customerPhone);
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "Error getting customer information from database.", "Error", JOptionPane.ERROR_MESSAGE);
                                continue;
                            }
                            
                            try {
                                holidayID  = DatabaseHandler.getInstance().getHolidayIDFromName(holidayName);
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "Error getting holiday information from database.", "Error", JOptionPane.ERROR_MESSAGE);
                                continue;
                            }
                            
                            try {
                                DatabaseHandler.getInstance().deleteWaitlistEntry(customerID, holidayID, year, timestamp);
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "Error deleting row.", "Error", JOptionPane.ERROR_MESSAGE);
                                System.out.println(ex.getMessage());
                            }
                        }
                        updateWaitlistTable();
                    }
                    
                });
                
                popup.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_WaitlistTableMouseClicked

    private void AddMagicianButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddMagicianButtonActionPerformed
        String name = AddMagicianNameTextField.getText();
        try {
            DatabaseHandler.getInstance().addMagician(name);
            JOptionPane.showMessageDialog(null, "Successfully added " + name + ".", "Booked", JOptionPane.INFORMATION_MESSAGE);
            updateMagicianComboBox();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error adding magician.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        rebookWaitlist();
    }//GEN-LAST:event_AddMagicianButtonActionPerformed

    private void DropMagicianButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DropMagicianButtonActionPerformed
        Magician m = (Magician) DropMagicianComboBox.getSelectedItem();
        try {
            DatabaseHandler.getInstance().dropMagician(m.getId());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error dropping magician.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        updateMagicianComboBox();
        try {
            waitlistBookings(m.getId());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error in rebooking msgician's bookings. Some bookings may have been rescheduled and some not. Contact database administrator. Magician ID: " + m.getId(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DropMagicianButtonActionPerformed

    private void MonthComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MonthComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            updateDaysComboBox();
        }
    }//GEN-LAST:event_MonthComboBoxItemStateChanged

    private void AddHolidayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddHolidayButtonActionPerformed
        int month = MonthComboBox.getSelectedIndex() + 1;
        int day   = DaysComboBox.getSelectedIndex() + 1;
        String name = HolidayNameTextField.getText();
        
        try {
            DatabaseHandler.getInstance().addHoliday(month, day, name);
            JOptionPane.showMessageDialog(null, "Added " + name + " for " + month + "/" + day + ".", "Booked", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error adding holiday.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        updateHolidayComboBox();
    }//GEN-LAST:event_AddHolidayButtonActionPerformed

    private void waitlistBookings(int magicianID) throws SQLException {
        ArrayList<Booking> bookings = DatabaseHandler.getInstance().getMagicianStatus(magicianID);
        for (Booking b : bookings) {
            DatabaseHandler.getInstance().deleteBooking(b.getCustomerID(), magicianID, b.getHolidayID(), b.getYear());
            int result = DatabaseHandler.getInstance().tryBookAndWaitlist(b.getCustomerID(), b.getHolidayID(), b.getYear(), b.getAddress(), b.getTimestamp());
            
            Customer customer = DatabaseHandler.getInstance().getCustomerFromID(b.getCustomerID());
            Holiday h = DatabaseHandler.getInstance().getHolidayFromID(b.getHolidayID());
            
            if (result == -1) {
                JOptionPane.showMessageDialog(null, "Added " + customer.getName() + " to waitlist for " + h.getName() + ", " + b.getYear() + ".", "Booked", JOptionPane.INFORMATION_MESSAGE);
            } else {
                Magician magician = DatabaseHandler.getInstance().getMagicianFromID(result);
                JOptionPane.showMessageDialog(null, "Re-booked " + magician.getName() + " for " + h.getName() + ", " + b.getYear() + " to " + 
                    customer.getName() + ".", "Booked", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
    
    private void rebookWaitlist() {
        ArrayList<WaitlistEntry> entries;
        try {
            entries = DatabaseHandler.getInstance().getWaitlistStatus();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error getting waitlist status.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        for (WaitlistEntry entry : entries) {
            doWaitlistRebook(entry);
        }
        
        updateWaitlistTable();
    }
    
    private boolean doWaitlistRebook(WaitlistEntry entry) {
        int result;
        try {
            result = DatabaseHandler.getInstance().tryBook(entry.getCustomerID(), entry.getHolidayID(), entry.getYear(), entry.getAddress(), entry.getTimeAdded());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error booking entry.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (result != -1) {
            Holiday h;
            try {
                h = DatabaseHandler.getInstance().getHolidayFromID(entry.getHolidayID());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error getting holiday info. Re-booking still successful.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            Magician magician;
            try {
                magician = DatabaseHandler.getInstance().getMagicianFromID(result);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error getting magician info. Re-booking still successful.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            Customer customer;
            try {
                customer = DatabaseHandler.getInstance().getCustomerFromID(entry.getCustomerID());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error getting customer info. Re-booking still successful.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            JOptionPane.showMessageDialog(null, "Booked " + magician.getName() + " for " + h.getName() + ", " + entry.getYear() + " to " + 
                    customer.getName() + " from waitlist.", "Booked", JOptionPane.INFORMATION_MESSAGE);

            try {
                DatabaseHandler.getInstance().deleteWaitlistEntry(entry.getCustomerID(), entry.getHolidayID(), entry.getYear(), entry.getTimeAdded().getTime());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error deleting waitlist entry.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            return true;
        }
        return false;
    }
    
    private void recheckWaitlist(int holidayID, int year) {
        ArrayList<WaitlistEntry> entries;
        try {
            entries = DatabaseHandler.getInstance().getWaitlistStatus();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error getting waitlist status.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        for (WaitlistEntry entry : entries) {
            if (entry.getHolidayID() != holidayID || entry.getYear() != year) continue;
            
            if (doWaitlistRebook(entry)) {
                updateWaitlistTable();
                return;
            }
        }
    }
    
    private boolean checkPhone(String phone) {
        return phone.matches("\\d{3}[-\\.\\s]\\d{3}[-\\.\\s]\\d{4}");
    }
    
    private void updateBookHolidayComboBox() {
        ArrayList<Holiday> holidays = new ArrayList<>();
        try {
            holidays = DatabaseHandler.getInstance().getHolidays();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error getting holiday information from database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        BookHolidaySelectionComboBox.removeAllItems();
        for (Holiday h : holidays) {
            BookHolidaySelectionComboBox.addItem(h);
        }
    }
    
    private void updateHolidayComboBox() {
        ArrayList<Holiday> holidays = new ArrayList<>();
        try {
            holidays = DatabaseHandler.getInstance().getHolidays();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error getting holiday information from database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        HolidayComboBox.removeAllItems();
        for (Holiday h : holidays) {
            HolidayComboBox.addItem(h);
        }
    }
    
    private void updateMagicianComboBox() {
        ArrayList<Magician> magicians = new ArrayList<>();
        try {
            magicians = DatabaseHandler.getInstance().getMagicians();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error getting magician information from database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        MagiciansComboBox.removeAllItems();
        for (Magician m : magicians) {
            MagiciansComboBox.addItem(m);
        }
    }
    
    private void updateStatusPane() {
        if (StatusPane.getSelectedComponent() == HolidaysScrollPane) {
            updateHolidayComboBox();
            updateHolidayTableWrapper(false);
        } else if (StatusPane.getSelectedComponent() == MagiciansScrollPane) {
            updateMagicianComboBox();
            updateMagiciansTableWrapper(false);
        } else {
            updateWaitlistTable();
        }
    }
    
    private void updateWaitlistTable() {
        DefaultTableModel tableModel = (DefaultTableModel) WaitlistTable.getModel();
        while (WaitlistTable.getRowCount() > 0) {
            tableModel.removeRow(0);
        }
        try {
            ArrayList<WaitlistEntry> waitlist = DatabaseHandler.getInstance().getWaitlistStatus();
            
            for (WaitlistEntry e : waitlist) {
                Customer customer = DatabaseHandler.getInstance().getCustomerFromID(e.getCustomerID());
                String holiday  = DatabaseHandler.getInstance().getHolidayFromID(e.getHolidayID()).getName();
                
                Object[] row = new Object[6];
                row[0] = customer.getName();
                row[1] = customer.getPhone();
                row[2] = holiday;
                row[3] = e.getYear();
                row[4] = e.getTimeAdded().getTime();
                row[5] = e.getAddress();

                tableModel.addRow(row);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error getting waitlist information from database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private void updateDaysComboBox() {
        Calendar cal = new GregorianCalendar(2004, MonthComboBox.getSelectedIndex(), 1); //2004 because it's a leap year
        int maxDays = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
        
        DaysComboBox.removeAllItems();
        
        for (int i = 1; i <= maxDays; ++i) {
            DaysComboBox.addItem(i + "");
        }
    }
    
    private void updateHolidayTableWrapper(boolean checkEmpty) {
        if (checkEmpty) {
            if (HolidayComboBox.getItemCount() == 0) updateHolidayComboBox();
        }
        Holiday h = (Holiday)HolidayComboBox.getSelectedItem();
        if (h != null) updateHolidayTable(h.getId(), (int) YearSpinner.getValue());
    }
    private void updateHolidayTable(int holidayID, int year) {
        try {
            DefaultTableModel tableModel = (DefaultTableModel) HolidaysTable.getModel();
            while (HolidaysTable.getRowCount() > 0) {
                tableModel.removeRow(0);
            }
            
            ArrayList<Booking> holidays = DatabaseHandler.getInstance().getHolidayStatus(holidayID, year);
            for (Booking current : holidays) {
                Customer customer = DatabaseHandler.getInstance().getCustomerFromID(current.getCustomerID());
                String holiday  = DatabaseHandler.getInstance().getHolidayFromID(current.getHolidayID()).getName();
                String magician = DatabaseHandler.getInstance().getMagicianFromID(current.getMagicianID()).getName();

                Object[] row = new Object[6];
                row[0] = customer.getName();
                row[1] = customer.getPhone();
                row[2] = holiday;
                row[3] = current.getYear();
                row[4] = magician;
                row[5] = current.getAddress();

                tableModel.addRow(row);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Could not get holiday information from database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void updateMagiciansTableWrapper(boolean checkEmpty) {
        if (checkEmpty) {
            if (MagiciansComboBox.getItemCount() == 0) updateMagicianComboBox();
        }
        Magician m = (Magician)MagiciansComboBox.getSelectedItem();
        if (m != null) updateMagiciansTable(m.getId());
    }
    private void updateMagiciansTable(int magicianID) {
        try {
            DefaultTableModel tableModel = (DefaultTableModel) MagicianTable.getModel();
            while (MagicianTable.getRowCount() > 0) {
                tableModel.removeRow(0);
            }
            
            ArrayList<Booking> holidays = DatabaseHandler.getInstance().getMagicianStatus(magicianID);
            for (Booking current : holidays) {
                Customer customer = DatabaseHandler.getInstance().getCustomerFromID(current.getCustomerID());
                String holiday  = DatabaseHandler.getInstance().getHolidayFromID(current.getHolidayID()).getName();
                String magician = DatabaseHandler.getInstance().getMagicianFromID(current.getMagicianID()).getName();

                Object[] row = new Object[6];
                row[0] = customer.getName();
                row[1] = customer.getPhone();
                row[2] = holiday;
                row[3] = current.getYear();
                row[4] = magician;
                row[5] = current.getAddress();

                tableModel.addRow(row);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Could not get holiday information from database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane ActionSelectorPane;
    private javax.swing.JButton AddHolidayButton;
    private javax.swing.JPanel AddHolidayPane;
    private javax.swing.JButton AddMagicianButton;
    private javax.swing.JTextField AddMagicianNameTextField;
    private javax.swing.JTextField BookCustomerNameTextField;
    private javax.swing.JTextField BookCustomerPhoneNumberTextField;
    private javax.swing.JTextField BookEventAddressTextField;
    private javax.swing.JComboBox<Holiday> BookHolidaySelectionComboBox;
    private javax.swing.JButton BookSubmitButton;
    private javax.swing.JSpinner BookYearSpinner;
    private javax.swing.JPanel BookingPane;
    private javax.swing.JComboBox<String> DaysComboBox;
    private javax.swing.JButton DropMagicianButton;
    private javax.swing.JComboBox<Magician> DropMagicianComboBox;
    private javax.swing.JComboBox<Holiday> HolidayComboBox;
    private javax.swing.JTextField HolidayNameTextField;
    private javax.swing.JPanel HolidaysPanel;
    private javax.swing.JScrollPane HolidaysScrollPane;
    private javax.swing.JTable HolidaysTable;
    private javax.swing.JTable MagicianTable;
    private javax.swing.JComboBox<Magician> MagiciansComboBox;
    private javax.swing.JPanel MagiciansPane;
    private javax.swing.JScrollPane MagiciansScrollPane;
    private javax.swing.JComboBox<String> MonthComboBox;
    private javax.swing.JTabbedPane StatusPane;
    private javax.swing.JScrollPane WaitlistScrollPane;
    private javax.swing.JTable WaitlistTable;
    private javax.swing.JSpinner YearSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
